--1.0	Setting up Oracle Chinook
         In this section you will begin the process of working with the Oracle Chinook database

--Task � Open the Chinook_Oracle.sql file and execute the scripts within.
--2.0 SQL Queries
--
In this section you will be performing various queries against the Oracle Chinook database.
--2.1 SELECT Task � Select all records from the Employee table.
      SELECT * FROM employee;

--Task � Select all records from the Employee table where last name is King.
      SELECT * FROM employee WHERE lastname = 'King';

--Task � Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
      SELECT * FROM employee WHERE firstname = 'Andrew'  AND reportsto IS NULL; 

--2.2 ORDER BY
--Task � Select all albums in Album table and sort result set in descending order by title.
  
         SELECT * FROM album
	        ORDER BY(title)DESC;

--Task � Select first name from Customer and sort result set in ascending order by city
SELECT firstname FROM customer
	    
            ORDER BY(city);
-- 2.3 INSERT INTO

-- Task – Insert two new records into Genre table
        
        INSERT INTO genre VALUES (26, 'Actions'), (27, 'suspense');
-- Task – Insert two new records into Employee table
        
        INSERT INTO employee VALUES (9,'uhmmll.,mb', 'juuvcdd', 'hygtfre','loba@hotmail.com');
        INSERT INTO employee VALUES (10,'hygtfr', 'ytgfrds', '7665', 6,'Brandon','US', 'Florida', 'T2H 2Y2', '1 (123)467-5671', 'punk@gmail.com');

-- Task – Insert two new records into Customer table
        
        INSERT INTO customer VALUES(45, 'iloba', 'kris', 'Revature', '7654 houston drive 'sugarland','Tx', 'United States', '77086','123-456-7890', '7654432', 'dickman@yahoomail.com', 5);
        INSERT INTO customer VALUES(61, 'James', 'Bryant', 'Revature', 'johnson  drive', 'oakland','TX', 'United States', '77063','3247658907', '123-456-7890', 'nmutaka@revature.com', 5);

-- 2.4 UPDATE
-- Task – Update Aaron Mitchell in Customer table to Robert Walter
        
        UPDATE customer SET firstname = 'Robert', lastname = 'Walter' WHERE firstname = 'Aaron','lastname'Mitchell';
-- Task – Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”
       
        UPDATE artist SET name = 'CCR' WHERE name = 'Creedence Clearwater Revival';
-- 2.5 LIKE
-- Task – Select all invoices with a billing address like “T%”
       
        SELECT * FROM invoice WHERE billingaddress LIKE 'T%';
-- 2.6 BETWEEN
-- Task – Select all invoices that have a total between 15 and 50
        
        SELECT * FROM invoice WHERE total BETWEEN 15 AND 50;
-- Task – Select all employees hired between+ 1st of June 2003 and 1st of March 2004
        
        SELECT * FROM employee WHERE hiredate BETWEEN '2003-06-1' AND '2004-03-1';
-- 2.7 DELETE
-- Task – Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).
        
        DELETE FROM invoiceline WHERE invoiceid IN (50, 61, 116, 245, 268, 290, 342);
	DELETE FROM invoice WHERE customerid = 32;
		DELETE FROM customer
			WHERE firstname = 'Robert' AND lastname = 'Walter';


         DELETE FROM invoiceline WHERE invoiceid 
                IN (SELECT invoiceid FROM invoice WHERE customerid 
                        IN(SELECT customerid FROM customer WHERE firstname = 'Robert' AND lastname = 'Walter'));
        DELETE FROM customer WHERE firstname = 'Robert' AND lastname = 'Walter';
-- 3.0	SQL Functions
-- In this section you will be using the Oracle system functions, as well as your own functions, to perform various actions against the database
-- 3.1 System Defined Functions
-- Task – Create a function that returns the current time.
        
        CREATE OR REPLACE FUNCTION currenttime()
        RETURNS TEXT AS $$
        BEGIN
        
        RETURN current_time;
        
        END;
    
-- Task – create a function that returns the length of a mediatype from the mediatype table
        
        CREATE OR REPLACE FUNCTION medialenght()
        RETURNS INTEGER AS $$
        DECLARE medlength INTEGER;
        BEGIN

        SELECT LEN(mediatype) INTO medlength FROM mediatype;
        RETURN medlength;

        END;
        
-- 3.2 System Defined Aggregate Functions
-- Task – Create a function that returns the average total of all invoices
        
        CREATE OR REPLACE FUNCTION totalavg()
        RETURNS FLOAT AS $$
        DECLARE totalavg FLOAT;
        BEGIN
                                                                                                                                                                                                        
        SELECT AVG(total) INTO totalavg FROM invoice;
        RETURN totalavg;
                                                                                                        
        END;
    
-- Task – Create a function that returns the most expensive track

        CREATE OR REPLACE FUNCTION most_expensive()
        RETURNS NUMERIC(10,2) AS $$
        DECLARE expensive NUMERIC(10,2);
        BEGIN

        SELECT MAX(unitprice) INTO expensive FROM track;
        RETURN expensive;

        END;										  
    	
-- 3.3 User Defined Scalar Functions
-- Task – Create a function that returns the average price of invoiceline items in the invoiceline table

        CREATE OR REPLACE FUNCTION avg_price()
        RETURNS NUMERIC(10,2) AS $$
        DECLARE price NUMERIC(10,2);
        BEGIN 

        SELECT AVG(unitprice) INTO price FROM invoiceline;
        RETURN price;

        END;
    
-- 3.4 User Defined Table Valued Functions
-- Task – Create a function that returns all employees who are born after 1968.

        CREATE OR REPLACE FUNCTION mod_birthdate()
        RETURNS TABLE(employeeid INTEGER, firstname VARCHAR, lastname VARCHAR) AS $$
        BEGIN

        RETURN QUERY SELECT employee.employeeid, employee.firstname, employee.lastname FROM employee 
        WHERE (employee.birthdate > '1968-12-31');
        
        END;
    
-- 4.0 Stored Procedures
--  In this section you will be creating and executing stored procedures. You will be creating various types of stored procedures that take input and output parameters.
-- 4.1 Basic Stored Procedure
-- Task – Create a stored procedure that selects the first and last names of all the employees.

        CREATE OR REPLACE FUNCTION all_employees()
        RETURNS TABLE(firstname VARCHAR, lastname VARCHAR) AS $$
        BEGIN
        RETURN QUERY SELECT employee.firstname, employee.lastname FROM employee;
        END;
    
-- 4.2 Stored Procedure Input Parameters
-- Task – Create a stored procedure that updates the personal information of an employee.

        CREATE OR REPLACE FUNCTION update_info()
        RETURNS VOID AS $$
        BEGIN

        UPDATE employee SET firstname = 'Joseph', lastname = 'Rivera' WHERE employeeid = 10;

        END;
    
-- Task – Create a stored procedure that returns the managers of an employee.

        CREATE OR REPLACE FUNCTION manager(empid INTEGER)
        RETURNS INTEGER AS $$
        DECLARE manager_id INTEGER;
        BEGIN

        SELECT reportsto FROM employee WHERE empid = employeeid INTO manager_id;
        RETURN manager_id;

        END;
    
-- 4.3 Stored Procedure Output Parameters
-- Task – Create a stored procedure that returns the name and company of a customer.
 
        CREATE OR REPLACE FUNCTION name_company(custid INTEGER)
        RETURNS VARCHAR AS $$
        DECLARE company_name VARCHAR;
        BEGIN

        SELECT company FROM customer
        WHERE custid = customerid INTO company_name;
        RETURN company_name;

        END;
        

-- 5.0 Transactions
-- In this section you will be working with transactions. Transactions are usually nested within a stored procedure. You will also be working with handling errors in your SQL.
-- Task – Create a transaction that given a invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).

        CREATE OR REPLACE FUNCTION delete_invoice(invid INTEGER)
        RETURNS VOID AS $$
        BEGIN

        DELETE FROM invoiceline WHERE invoiceid 
                IN(SELECT invoiceid FROM invoice WHERE invid = invoiceid);
        DELETE FROM invoice WHERE invid = invoiceid;
                
        END;
        

-- Task – Create a transaction nested within a stored procedure that inserts a new record in the Customer table

        CREATE OR REPLACE FUNCTION insert_record()
        RETURNS VOID AS $$
        BEGIN

        INSERT INTO customer VALUES(63, 'Josh', 'Rivera', 'Revature', 'Brandon Crossings Apt. 111', 'Tampa','FL', 'United States', '33511','123-456-7890', '987-654-3210', 'josue@revature.com', 5);

        END;
    

-- 6.0 Triggers
-- In this section you will create various kinds of triggers that work when certain DML statements are executed on a table.
-- 6.1 AFTER/FOR

-- Task - Create an after insert trigger on the employee table fired after a new record is inserted into the table.
        CREATE TRIGGER employee_insert_trig
        AFTER INSERT ON employee
        FOR EACH ROW
        EXECUTE PROCEDURE employee_trig();
-- Task – Create an after update trigger on the album table that fires after a row is inserted in the table
        CREATE TRIGGER album_update_trig
        AFTER UPDATE ON album
        FOR EACH ROW
        EXECUTE PROCEDURE album_trig(); 
-- Task – Create an after delete trigger on the customer table that fires after a row is deleted from the table.
        CREATE TRIGGER customer_delete_trig
        AFTER DELETE ON customer
        FOR EACH ROW
        EXECUTE PROCEDURE customer_trig(); 
-- 6.2 INSTEAD OF 'USE BEFORE'
-- Task – Create an instead of trigger that restricts the deletion of any invoice that is priced over 50 dollars.

-- 7.0 JOINS
-- In this section you will be working with combing various tables through the use of joins. You will work with outer, inner, right, left, cross, and self joins.
-- 7.1 INNER
-- Task – Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
        SELECT customer.firstname, customer.lastname, invoice.invoiceid
	FROM customer
		INNER JOIN invoice
			ON(customer.customerid = invoice.customerid);
-- 7.2 OUTER
-- Task – Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
        SELECT customer.customerid, customer.firstname, customer.lastname, invoice.invoiceid, invoice.total
	FROM customer
	 FULL OUTER JOIN invoice
	 	ON (customer.customerid = invoice.customerid);
-- 7.3 RIGHT
-- Task – Create a right join that joins album and artist specifying artist name and title.
        SELECT album.title, artist.name FROM album
	RIGHT JOIN artist
		ON (album.artistid = artist.artistid);
-- 7.4 CROSS
-- Task – Create a cross join that joins album and artist and sorts by artist name in ascending order.
        SELECT * FROM album
	CROSS JOIN artist
		ORDER BY artist.name;
-- 7.5 SELF
-- Task – Perform a self-join on the employee table, joining on the reportsto column.
        SELECT * FROM employee a1
                INNER JOIN employee a2
				ON (a1.employeeid = a2.reportsto);
